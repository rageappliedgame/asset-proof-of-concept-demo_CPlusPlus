#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace asset-proof-of-concept-demo_CPlusPlus {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class versionDataTable;
        public : ref class dependenciesDataTable;
        public : ref class dependsDataTable;
        public : ref class versionRow;
        public : ref class dependenciesRow;
        public : ref class dependsRow;
        public : ref class versionRowChangeEvent;
        public : ref class dependenciesRowChangeEvent;
        public : ref class dependsRowChangeEvent;
        
        private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  tableversion;
        
        private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  tabledependencies;
        
        private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  tabledepends;
        
        private: ::System::Data::DataRelation^  relationversion_dependencies;
        
        private: ::System::Data::DataRelation^  relationdependencies_depends;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void versionRowChangeEventHandler(::System::Object^  sender, asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void dependenciesRowChangeEventHandler(::System::Object^  sender, asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void dependsRowChangeEventHandler(::System::Object^  sender, asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  version {
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  dependencies {
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  depends {
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeversion();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializedependencies();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializedepends();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class versionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnmajor;
            
            private: ::System::Data::DataColumn^  columnminor;
            
            private: ::System::Data::DataColumn^  columnbuild;
            
            private: ::System::Data::DataColumn^  columnrevision;
            
            private: ::System::Data::DataColumn^  columnmaturity;
            
            private: ::System::Data::DataColumn^  columnversion_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEventHandler^  versionRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEventHandler^  versionRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEventHandler^  versionRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEventHandler^  versionRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            versionDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            versionDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            versionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  majorColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  minorColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  buildColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  revisionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  maturityColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  version_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  default [::System::Int32 ] {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddversionRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  AddversionRow(
                        System::String^  id, 
                        System::SByte major, 
                        System::SByte minor, 
                        System::SByte build, 
                        System::String^  revision, 
                        System::String^  maturity);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  NewversionRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveversionRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class dependenciesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columndependencies_Id;
            
            private: ::System::Data::DataColumn^  columnversion_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEventHandler^  dependenciesRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEventHandler^  dependenciesRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEventHandler^  dependenciesRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEventHandler^  dependenciesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependenciesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependenciesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependenciesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  dependencies_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  version_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  default [::System::Int32 ] {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AdddependenciesRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  AdddependenciesRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  parentversionRowByversion_dependencies);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  NewdependenciesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovedependenciesRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class dependsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnminVersion;
            
            private: ::System::Data::DataColumn^  columnmaxVersion;
            
            private: ::System::Data::DataColumn^  columndepends_text;
            
            private: ::System::Data::DataColumn^  columndependencies_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEventHandler^  dependsRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEventHandler^  dependsRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEventHandler^  dependsRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEventHandler^  dependsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  minVersionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  maxVersionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  depends_textColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  dependencies_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  default [::System::Int32 ] {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AdddependsRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  AdddependsRow(System::String^  minVersion, System::String^  maxVersion, 
                        System::String^  depends_text, asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  parentdependenciesRowBydependencies_depends);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  NewdependsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovedependsRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class versionRow : public ::System::Data::DataRow {
            
            private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  tableversion;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            versionRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::SByte major {
                System::SByte get();
                System::Void set(System::SByte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::SByte minor {
                System::SByte get();
                System::Void set(System::SByte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::SByte build {
                System::SByte get();
                System::Void set(System::SByte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  revision {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  maturity {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 version_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbuildNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbuildNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsrevisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetrevisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >^  GetdependenciesRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class dependenciesRow : public ::System::Data::DataRow {
            
            private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  tabledependencies;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependenciesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 dependencies_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 version_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  versionRow {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  get();
                System::Void set(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isversion_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setversion_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >^  GetdependsRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class dependsRow : public ::System::Data::DataRow {
            
            private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  tabledepends;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  minVersion {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  maxVersion {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  depends_text {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 dependencies_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  dependenciesRow {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  get();
                System::Void set(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsminVersionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetminVersionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsmaxVersionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetmaxVersionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isdependencies_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setdependencies_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class versionRowChangeEvent : public ::System::EventArgs {
            
            private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            versionRowChangeEvent(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  Row {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class dependenciesRowChangeEvent : public ::System::EventArgs {
            
            private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependenciesRowChangeEvent(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  Row {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class dependsRowChangeEvent : public ::System::EventArgs {
            
            private: asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            dependsRowChangeEvent(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  Row {
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace asset-proof-of-concept-demo_CPlusPlus {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &asset-proof-of-concept-demo_CPlusPlus::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &asset-proof-of-concept-demo_CPlusPlus::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"version"] != nullptr) {
                __super::Tables->Add((gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable(ds->Tables[L"version"])));
            }
            if (ds->Tables[L"dependencies"] != nullptr) {
                __super::Tables->Add((gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable(ds->Tables[L"dependencies"])));
            }
            if (ds->Tables[L"depends"] != nullptr) {
                __super::Tables->Add((gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable(ds->Tables[L"depends"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &asset-proof-of-concept-demo_CPlusPlus::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  NewDataSet::version::get() {
        return this->tableversion;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  NewDataSet::dependencies::get() {
        return this->tabledependencies;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  NewDataSet::depends::get() {
        return this->tabledepends;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet^  cln = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"version"] != nullptr) {
                __super::Tables->Add((gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable(ds->Tables[L"version"])));
            }
            if (ds->Tables[L"dependencies"] != nullptr) {
                __super::Tables->Add((gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable(ds->Tables[L"dependencies"])));
            }
            if (ds->Tables[L"depends"] != nullptr) {
                __super::Tables->Add((gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable(ds->Tables[L"depends"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableversion = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  >(__super::Tables[L"version"]));
        if (initTable == true) {
            if (this->tableversion != nullptr) {
                this->tableversion->InitVars();
            }
        }
        this->tabledependencies = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  >(__super::Tables[L"dependencies"]));
        if (initTable == true) {
            if (this->tabledependencies != nullptr) {
                this->tabledependencies->InitVars();
            }
        }
        this->tabledepends = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  >(__super::Tables[L"depends"]));
        if (initTable == true) {
            if (this->tabledepends != nullptr) {
                this->tabledepends->InitVars();
            }
        }
        this->relationversion_dependencies = this->Relations[L"version_dependencies"];
        this->relationdependencies_depends = this->Relations[L"dependencies_depends"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableversion = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable());
        __super::Tables->Add(this->tableversion);
        this->tabledependencies = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable());
        __super::Tables->Add(this->tabledependencies);
        this->tabledepends = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable());
        __super::Tables->Add(this->tabledepends);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"version_dependencies", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableversion->version_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledependencies->version_IdColumn}));
        this->tabledependencies->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"dependencies_depends", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledependencies->dependencies_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledepends->dependencies_IdColumn}));
        this->tabledepends->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationversion_dependencies = (gcnew ::System::Data::DataRelation(L"version_dependencies", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableversion->version_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledependencies->version_IdColumn}, false));
        this->relationversion_dependencies->Nested = true;
        this->Relations->Add(this->relationversion_dependencies);
        this->relationdependencies_depends = (gcnew ::System::Data::DataRelation(L"dependencies_depends", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledependencies->dependencies_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledepends->dependencies_IdColumn}, false));
        this->relationdependencies_depends->Nested = true;
        this->Relations->Add(this->relationdependencies_depends);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeversion() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializedependencies() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializedepends() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet^  ds = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::versionDataTable::versionDataTable() {
        this->TableName = L"version";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::versionDataTable::versionDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::versionDataTable::versionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::majorColumn::get() {
        return this->columnmajor;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::minorColumn::get() {
        return this->columnminor;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::buildColumn::get() {
        return this->columnbuild;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::revisionColumn::get() {
        return this->columnrevision;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::maturityColumn::get() {
        return this->columnmaturity;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::versionDataTable::version_IdColumn::get() {
        return this->columnversion_Id;
    }
    
    inline ::System::Int32 NewDataSet::versionDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  NewDataSet::versionDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::versionDataTable::AddversionRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  row) {
        this->Rows->Add(row);
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  NewDataSet::versionDataTable::AddversionRow(
                System::String^  id, 
                System::SByte major, 
                System::SByte minor, 
                System::SByte build, 
                System::String^  revision, 
                System::String^  maturity) {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  rowversionRow = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {id, major, minor, build, 
            revision, maturity, nullptr};
        rowversionRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowversionRow);
        return rowversionRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::versionDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::versionDataTable::Clone() {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  cln = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::versionDataTable::CreateInstance() {
        return (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable());
    }
    
    inline ::System::Void NewDataSet::versionDataTable::InitVars() {
        this->columnid = __super::Columns[L"id"];
        this->columnmajor = __super::Columns[L"major"];
        this->columnminor = __super::Columns[L"minor"];
        this->columnbuild = __super::Columns[L"build"];
        this->columnrevision = __super::Columns[L"revision"];
        this->columnmaturity = __super::Columns[L"maturity"];
        this->columnversion_Id = __super::Columns[L"version_Id"];
    }
    
    inline ::System::Void NewDataSet::versionDataTable::InitClass() {
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnid);
        this->columnmajor = (gcnew ::System::Data::DataColumn(L"major", ::System::SByte::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnmajor);
        this->columnminor = (gcnew ::System::Data::DataColumn(L"minor", ::System::SByte::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnminor);
        this->columnbuild = (gcnew ::System::Data::DataColumn(L"build", ::System::SByte::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnbuild);
        this->columnrevision = (gcnew ::System::Data::DataColumn(L"revision", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnrevision);
        this->columnmaturity = (gcnew ::System::Data::DataColumn(L"maturity", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnmaturity);
        this->columnversion_Id = (gcnew ::System::Data::DataColumn(L"version_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnversion_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnversion_Id}, 
                true)));
        this->columnid->AllowDBNull = false;
        this->columnmajor->AllowDBNull = false;
        this->columnminor->AllowDBNull = false;
        this->columnmaturity->AllowDBNull = false;
        this->columnversion_Id->AutoIncrement = true;
        this->columnversion_Id->AllowDBNull = false;
        this->columnversion_Id->Unique = true;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  NewDataSet::versionDataTable::NewversionRow() {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::versionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::versionDataTable::GetRowType() {
        return asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow::typeid;
    }
    
    inline ::System::Void NewDataSet::versionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->versionRowChanged(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::versionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->versionRowChanging(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::versionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->versionRowDeleted(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::versionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->versionRowDeleting(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::versionDataTable::RemoveversionRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::versionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet^  ds = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"versionDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::dependenciesDataTable::dependenciesDataTable() {
        this->TableName = L"dependencies";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::dependenciesDataTable::dependenciesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::dependenciesDataTable::dependenciesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::dependenciesDataTable::dependencies_IdColumn::get() {
        return this->columndependencies_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::dependenciesDataTable::version_IdColumn::get() {
        return this->columnversion_Id;
    }
    
    inline ::System::Int32 NewDataSet::dependenciesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  NewDataSet::dependenciesDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::AdddependenciesRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  NewDataSet::dependenciesDataTable::AdddependenciesRow(
                asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  parentversionRowByversion_dependencies) {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  rowdependenciesRow = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentversionRowByversion_dependencies != nullptr) {
            columnValuesArray[1] = parentversionRowByversion_dependencies[6];
        }
        rowdependenciesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowdependenciesRow);
        return rowdependenciesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::dependenciesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::dependenciesDataTable::Clone() {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  cln = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::dependenciesDataTable::CreateInstance() {
        return (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable());
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::InitVars() {
        this->columndependencies_Id = __super::Columns[L"dependencies_Id"];
        this->columnversion_Id = __super::Columns[L"version_Id"];
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::InitClass() {
        this->columndependencies_Id = (gcnew ::System::Data::DataColumn(L"dependencies_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columndependencies_Id);
        this->columnversion_Id = (gcnew ::System::Data::DataColumn(L"version_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnversion_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columndependencies_Id}, 
                true)));
        this->columndependencies_Id->AutoIncrement = true;
        this->columndependencies_Id->AllowDBNull = false;
        this->columndependencies_Id->Unique = true;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  NewDataSet::dependenciesDataTable::NewdependenciesRow() {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::dependenciesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::dependenciesDataTable::GetRowType() {
        return asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->dependenciesRowChanged(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->dependenciesRowChanging(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->dependenciesRowDeleted(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->dependenciesRowDeleting(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependenciesDataTable::RemovedependenciesRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::dependenciesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet^  ds = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"dependenciesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::dependsDataTable::dependsDataTable() {
        this->TableName = L"depends";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::dependsDataTable::dependsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::dependsDataTable::dependsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::dependsDataTable::minVersionColumn::get() {
        return this->columnminVersion;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::dependsDataTable::maxVersionColumn::get() {
        return this->columnmaxVersion;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::dependsDataTable::depends_textColumn::get() {
        return this->columndepends_text;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::dependsDataTable::dependencies_IdColumn::get() {
        return this->columndependencies_Id;
    }
    
    inline ::System::Int32 NewDataSet::dependsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  NewDataSet::dependsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::AdddependsRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  NewDataSet::dependsDataTable::AdddependsRow(System::String^  minVersion, 
                System::String^  maxVersion, System::String^  depends_text, asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  parentdependenciesRowBydependencies_depends) {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  rowdependsRow = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {minVersion, maxVersion, 
            depends_text, nullptr};
        if (parentdependenciesRowBydependencies_depends != nullptr) {
            columnValuesArray[3] = parentdependenciesRowBydependencies_depends[0];
        }
        rowdependsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowdependsRow);
        return rowdependsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::dependsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::dependsDataTable::Clone() {
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  cln = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::dependsDataTable::CreateInstance() {
        return (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable());
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::InitVars() {
        this->columnminVersion = __super::Columns[L"minVersion"];
        this->columnmaxVersion = __super::Columns[L"maxVersion"];
        this->columndepends_text = __super::Columns[L"depends_text"];
        this->columndependencies_Id = __super::Columns[L"dependencies_Id"];
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::InitClass() {
        this->columnminVersion = (gcnew ::System::Data::DataColumn(L"minVersion", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnminVersion);
        this->columnmaxVersion = (gcnew ::System::Data::DataColumn(L"maxVersion", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmaxVersion);
        this->columndepends_text = (gcnew ::System::Data::DataColumn(L"depends_text", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
        __super::Columns->Add(this->columndepends_text);
        this->columndependencies_Id = (gcnew ::System::Data::DataColumn(L"dependencies_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columndependencies_Id);
        this->columnminVersion->Namespace = L"";
        this->columnmaxVersion->Namespace = L"";
        this->columndepends_text->AllowDBNull = false;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  NewDataSet::dependsDataTable::NewdependsRow() {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::dependsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::dependsDataTable::GetRowType() {
        return asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->dependsRowChanged(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->dependsRowChanging(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->dependsRowDeleted(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->dependsRowDeleting(this, (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRowChangeEvent((cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::dependsDataTable::RemovedependsRow(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::dependsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        asset-proof-of-concept-demo_CPlusPlus::NewDataSet^  ds = (gcnew asset-proof-of-concept-demo_CPlusPlus::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"dependsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::versionRow::versionRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableversion = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::versionRow::id::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableversion->idColumn]));
    }
    inline System::Void NewDataSet::versionRow::id::set(System::String^  value) {
        this[this->tableversion->idColumn] = value;
    }
    
    inline System::SByte NewDataSet::versionRow::major::get() {
        return (cli::safe_cast<::System::SByte >(this[this->tableversion->majorColumn]));
    }
    inline System::Void NewDataSet::versionRow::major::set(System::SByte value) {
        this[this->tableversion->majorColumn] = value;
    }
    
    inline System::SByte NewDataSet::versionRow::minor::get() {
        return (cli::safe_cast<::System::SByte >(this[this->tableversion->minorColumn]));
    }
    inline System::Void NewDataSet::versionRow::minor::set(System::SByte value) {
        this[this->tableversion->minorColumn] = value;
    }
    
    inline System::SByte NewDataSet::versionRow::build::get() {
        try {
            return (cli::safe_cast<::System::SByte >(this[this->tableversion->buildColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'build\' in table \'version\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::versionRow::build::set(System::SByte value) {
        this[this->tableversion->buildColumn] = value;
    }
    
    inline System::String^  NewDataSet::versionRow::revision::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableversion->revisionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'revision\' in table \'version\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::versionRow::revision::set(System::String^  value) {
        this[this->tableversion->revisionColumn] = value;
    }
    
    inline System::String^  NewDataSet::versionRow::maturity::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableversion->maturityColumn]));
    }
    inline System::Void NewDataSet::versionRow::maturity::set(System::String^  value) {
        this[this->tableversion->maturityColumn] = value;
    }
    
    inline System::Int32 NewDataSet::versionRow::version_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableversion->version_IdColumn]));
    }
    inline System::Void NewDataSet::versionRow::version_Id::set(System::Int32 value) {
        this[this->tableversion->version_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::versionRow::IsbuildNull() {
        return this->IsNull(this->tableversion->buildColumn);
    }
    
    inline ::System::Void NewDataSet::versionRow::SetbuildNull() {
        this[this->tableversion->buildColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::versionRow::IsrevisionNull() {
        return this->IsNull(this->tableversion->revisionColumn);
    }
    
    inline ::System::Void NewDataSet::versionRow::SetrevisionNull() {
        this[this->tableversion->revisionColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >^  NewDataSet::versionRow::GetdependenciesRows() {
        if (this->Table->ChildRelations[L"version_dependencies"] == nullptr) {
            return gcnew cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"version_dependencies"])));
        }
    }
    
    
    inline NewDataSet::dependenciesRow::dependenciesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabledependencies = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::dependenciesRow::dependencies_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledependencies->dependencies_IdColumn]));
    }
    inline System::Void NewDataSet::dependenciesRow::dependencies_Id::set(System::Int32 value) {
        this[this->tabledependencies->dependencies_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::dependenciesRow::version_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabledependencies->version_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'version_Id\' in table \'dependencies\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::dependenciesRow::version_Id::set(System::Int32 value) {
        this[this->tabledependencies->version_IdColumn] = value;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  NewDataSet::dependenciesRow::versionRow::get() {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"version_dependencies"])));
    }
    inline System::Void NewDataSet::dependenciesRow::versionRow::set(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"version_dependencies"]);
    }
    
    inline ::System::Boolean NewDataSet::dependenciesRow::Isversion_IdNull() {
        return this->IsNull(this->tabledependencies->version_IdColumn);
    }
    
    inline ::System::Void NewDataSet::dependenciesRow::Setversion_IdNull() {
        this[this->tabledependencies->version_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >^  NewDataSet::dependenciesRow::GetdependsRows() {
        if (this->Table->ChildRelations[L"dependencies_depends"] == nullptr) {
            return gcnew cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"dependencies_depends"])));
        }
    }
    
    
    inline NewDataSet::dependsRow::dependsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabledepends = (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::dependsRow::minVersion::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabledepends->minVersionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'minVersion\' in table \'depends\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::dependsRow::minVersion::set(System::String^  value) {
        this[this->tabledepends->minVersionColumn] = value;
    }
    
    inline System::String^  NewDataSet::dependsRow::maxVersion::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabledepends->maxVersionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'maxVersion\' in table \'depends\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::dependsRow::maxVersion::set(System::String^  value) {
        this[this->tabledepends->maxVersionColumn] = value;
    }
    
    inline System::String^  NewDataSet::dependsRow::depends_text::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tabledepends->depends_textColumn]));
    }
    inline System::Void NewDataSet::dependsRow::depends_text::set(System::String^  value) {
        this[this->tabledepends->depends_textColumn] = value;
    }
    
    inline System::Int32 NewDataSet::dependsRow::dependencies_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabledepends->dependencies_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'dependencies_Id\' in table \'depends\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::dependsRow::dependencies_Id::set(System::Int32 value) {
        this[this->tabledepends->dependencies_IdColumn] = value;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  NewDataSet::dependsRow::dependenciesRow::get() {
        return (cli::safe_cast<asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"dependencies_depends"])));
    }
    inline System::Void NewDataSet::dependsRow::dependenciesRow::set(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"dependencies_depends"]);
    }
    
    inline ::System::Boolean NewDataSet::dependsRow::IsminVersionNull() {
        return this->IsNull(this->tabledepends->minVersionColumn);
    }
    
    inline ::System::Void NewDataSet::dependsRow::SetminVersionNull() {
        this[this->tabledepends->minVersionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::dependsRow::IsmaxVersionNull() {
        return this->IsNull(this->tabledepends->maxVersionColumn);
    }
    
    inline ::System::Void NewDataSet::dependsRow::SetmaxVersionNull() {
        this[this->tabledepends->maxVersionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::dependsRow::Isdependencies_IdNull() {
        return this->IsNull(this->tabledepends->dependencies_IdColumn);
    }
    
    inline ::System::Void NewDataSet::dependsRow::Setdependencies_IdNull() {
        this[this->tabledepends->dependencies_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::versionRowChangeEvent::versionRowChangeEvent(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::versionRow^  NewDataSet::versionRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::versionRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::dependenciesRowChangeEvent::dependenciesRowChangeEvent(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependenciesRow^  NewDataSet::dependenciesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::dependenciesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::dependsRowChangeEvent::dependsRowChangeEvent(asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline asset-proof-of-concept-demo_CPlusPlus::NewDataSet::dependsRow^  NewDataSet::dependsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::dependsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
